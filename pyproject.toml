[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aniplux"
version = "0.1.0"
description = "Modern anime episode downloader with beautiful CLI interface"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "AniPlux Team"},
]
keywords = ["anime", "downloader", "cli", "episodes"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Multimedia :: Video",
]

dependencies = [
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "asyncio-throttle>=1.0.0",
    "click>=8.0.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "yt-dlp>=2023.12.30",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
selenium = [
    "selenium>=4.15.0",
    "selenium-wire>=5.1.0",
    "selenium-stealth>=1.0.6",
    "yt-dlp>=2023.12.30",
]

[project.scripts]
aniplux = "aniplux.cli.main:app"

[project.urls]
Homepage = "https://github.com/aniplux/aniplux"
Repository = "https://github.com/aniplux/aniplux"
Issues = "https://github.com/aniplux/aniplux/issues"

[tool.hatch.build.targets.wheel]
packages = ["aniplux"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["aniplux"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["aniplux"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]